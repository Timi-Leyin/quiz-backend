<body id="ar-mp">
  <main class="max-w-[1440px] relative mx-auto">
    <header class="bg-[#EFF2F6] sticky w-[90%] mx-auto top-4 left-0 p-8 my-5 rounded-full">
      <img src="/logo.png" alt="" />
    </header>




      {{#if error}}
             <p class="font-bold w-[80%] mx-auto  text-sm p-4 bg-red-200 text-red-700 mb-3 border-l border-l-red-700">{{error}}</p>
             {{else}}
  <div id="success" class="h-screen flex items-center justify-center">
        <div class="bg-white p-6 rounded-lg shadow-lg text-center">
            <div class="text-green-500 mb-4">
                <!-- Success Icon -->
                <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m0 0a9 9 0 110-12 9 9 0 010 12z"></path>
                </svg>
            </div>
            <h2 class="text-2xl font-bold text-gray-800 mb-2">Success!</h2>
            <p class="text-gray-600 mb-6">Your operation was completed successfully.</p>
            <button class="bg-primary text-white px-4 py-2 rounded hover:opacity-80">
                Go to Dashboard
            </button>
        </div>
    </div>


    <section id="main-form-el" class="px-6">
      <form method="post" id="ar-mp-form-action" action="">
        <div class="text-center my-12">
          <h1 class="text-3xl md:text-5xl font-bold">Complete your profile
            creation</h1>
          <p class="text-sm py-1 font-bold">Your are invited to be an artist
            Manager on TCAG</p>
        </div>

        <div class="max-w-[800px] mx-auto">

          <div class="flex flex-1 my-4 select-none flex-col gap-4">
            <label for="email" class="font-bold">Email</label>
            <input
              name="email"
              disabled
              id="email"
              class="outline-none p-4 border-[rgba(0,0,0,0.3)] border-2 rounded-lg"
              placeholder="hello@tcag.com"
            />
          </div>

          <div class="md:flex gap-6 justify-center items-center">
            {{! INPUT START }}

            <div class="flex flex-1 flex-col gap-4">
              <label for="password" class="font-bold">Password</label>
              <input
                name="password"
                id="password"
                class="outline-none p-4 border-[rgba(0,0,0,0.3)] border-2 rounded-lg"
                placeholder="**********"
              />
            </div>

            <div class="flex flex-1 flex-col gap-4">
              <label for="confirm-password" class="font-bold">Confirm Password</label>
              <input
                name="confirm-password"
                id="confirm-password"
                class="outline-none p-4 border-[rgba(0,0,0,0.3)] border-2 rounded-lg"
                placeholder="**********"
              />
            </div>

            {{! INPUT START }}

          </div>

          <div class="my-8">
            <h4 class="font-bold text-xl">Password Strength</h4>

            <div class="flex password-strength gap-4 my-4 items-center">
              <span class="p-1 bg-gray-200 rounded-md flex-1"></span>
              <span class="p-1 bg-gray-200 rounded-md flex-1"></span>
              <span class="p-1 bg-gray-200 rounded-md flex-1"></span>
            </div>
           
            <p class="text-sm opacity-60 max-w-[400px]">
              Passwords must be a minimum of 8 characters. Include one letter,
              and one number or symbol.
            </p>
          </div>

       <p class="error font-bold text-sm p-4 bg-red-200 text-red-700 mb-3 border-l border-l-red-700"></p>
          <button
            type="submit"
            id="ar-mp-btn"
            class="p-4 h-[60px] bg-primary rounded-lg w-full font-bold text-white"
          >Accept Invitation</button>

          <p class="my-3 text-sm">By continuing, you agree to the TCAG
            <a href="" class="text-primary font-bold">Terms and Privacy Policy
              and custodian agreement</a>.</p>

        </div>

      </form>
    </section>

            {{/if}}

  </main>
<script src="https://unpkg.com/validator@latest/validator.min.js"></script>
  <script type="text/javascript">
    class ProfileCreation{ 
      constructor(){
        const url = new URL(window.location.href);
        const params = new URLSearchParams(url.search);

        this.form = document.querySelector("#ar-mp-form-action");
        this.formEmail = this.form.querySelector("input#email")
        this.formPassword = this.form.querySelector("input#password")
        this.successEl = document.querySelector("#success")
        this.mainEl = document.querySelector("#main-form-el");
        this.formConfirmPassword = this.form.querySelector("input#confirm-password");
        this.formButton = this.form.querySelector("#ar-mp-btn");
        this.errorEl=document.querySelector(".error")
        this.stepStage = 0;
        this.regex=new RegExp(/\d\w+/)
        this.isLoading = false
        this.code = params.get('code');
        this.e = params.get('e');
        this.createPasswordURL = "/api/artist-manager/create-password";


        // INITIAL STATE
        this.formEmail.setAttribute("value", this.e || "Invalid Link");
        this.successEl.style.display="none"
        this.errorEl.style.display="none"
      }

      async submitForm(){
        try{
          this.isLoading = true;
          this.formButton.innerHTML = "Loading..."
          this.validateForm();
         const body = {
          email: this.formEmail.value,
          password: this.formPassword.value,
          code: this.code
          }
          const response = await fetch(this.createPasswordURL, {
            method:"POST",
            headers:{
              "Content-Type":"application/json"
            },
            body:JSON.stringify(body)
          });

          const data = await response.json();
          this.mainEl.innerHTML="";
          this.successEl.style.display="block";
          console.log("[LOG]", data)
        }catch(error){
          console.log("[ERROR]", typeof error, JSON.stringify(error))
        }finally{
          this.isLoading = false
          this.formButton.innerText = "Accept invitation"
        }
      }

      validateForm(){
          this.stepStage = 0;
          const email= validator.isEmail(this.formEmail.value);
          const password = validator.isStrongPassword(this.formPassword.value)
          const confirmPassword = this.formPassword.value === this.formConfirmPassword.value;

          const validated = email && password && confirmPassword
          email && this.stepStage ++
          password && this.stepStage ++
          confirmPassword && this.stepStage ++

          if(!validated){
            this.errorEl.style.display="block"
            // this.formButton.setAttribute("disabled", true)
            this.errorEl.innerHTML = (!email && "Invalid Email") || (!password && "Passwords must be a minimum of 8 characters. Include one letter, and one number or symbol.") || (!confirmPassword && "Password does not match");
            throw new Error("Invalid form inputs");
            return;
          }
            this.errorEl.style.display="block"
      } 

      async confirmVerification(){}

      async showSuccess(){}
    }




  window.addEventListener("DOMContentLoaded", ()=>{
      const account = new ProfileCreation();
      console.log("[LOG]", "DOM Loaded");
      account.form.addEventListener("submit",(ev)=>{
        ev.preventDefault();
         account.submitForm()
      })
  })


  </script>
</body>